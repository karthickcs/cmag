/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable } from 'rxjs';

import { TableStructDTO } from '../model/tableStructDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TableStructControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * countLines
     * 
     * @param taskid taskid
     * @param runid runid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countLinesUsingGET(taskid: string, runid: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public countLinesUsingGET(taskid: string, runid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public countLinesUsingGET(taskid: string, runid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public countLinesUsingGET(taskid: string, runid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskid === null || taskid === undefined) {
            throw new Error('Required parameter taskid was null or undefined when calling countLinesUsingGET.');
        }

        if (runid === null || runid === undefined) {
            throw new Error('Required parameter runid was null or undefined when calling countLinesUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<string>(`${this.basePath}/tablestructcount/${encodeURIComponent(String(taskid))}/${encodeURIComponent(String(runid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * gettablestructs
     * 
     * @param taskid taskid
     * @param runid runid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gettablestructsUsingGET(taskid: string, runid: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TableStructDTO>>;
    public gettablestructsUsingGET(taskid: string, runid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TableStructDTO>>>;
    public gettablestructsUsingGET(taskid: string, runid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TableStructDTO>>>;
    public gettablestructsUsingGET(taskid: string, runid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskid === null || taskid === undefined) {
            throw new Error('Required parameter taskid was null or undefined when calling gettablestructsUsingGET.');
        }

        if (runid === null || runid === undefined) {
            throw new Error('Required parameter runid was null or undefined when calling gettablestructsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TableStructDTO>>(`${this.basePath}/tablestruct/${encodeURIComponent(String(taskid))}/${encodeURIComponent(String(runid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * gettablestructstname
     * 
     * @param taskid taskid
     * @param runid runid
     * @param tname tname
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gettablestructstnameUsingGET(taskid: string, runid: string, tname: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TableStructDTO>>;
    public gettablestructstnameUsingGET(taskid: string, runid: string, tname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TableStructDTO>>>;
    public gettablestructstnameUsingGET(taskid: string, runid: string, tname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TableStructDTO>>>;
    public gettablestructstnameUsingGET(taskid: string, runid: string, tname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskid === null || taskid === undefined) {
            throw new Error('Required parameter taskid was null or undefined when calling gettablestructstnameUsingGET.');
        }

        if (runid === null || runid === undefined) {
            throw new Error('Required parameter runid was null or undefined when calling gettablestructstnameUsingGET.');
        }

        if (tname === null || tname === undefined) {
            throw new Error('Required parameter tname was null or undefined when calling gettablestructstnameUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TableStructDTO>>(`${this.basePath}/tablestructtname/${encodeURIComponent(String(taskid))}/${encodeURIComponent(String(runid))}/${encodeURIComponent(String(tname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
